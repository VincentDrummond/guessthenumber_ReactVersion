{"ast":null,"code":"var _jsxFileName = \"/Users/vincent/Desktop/Coding/The_Jump/guessthenumber_ReactVersion/src/View.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// the body\n// here is the app interface, the presentation layer, the HTML\n// store functional components\n// dont use too much logic - pass down functionality from the App\n// App component imports in from here to render the UI\n// functional components DO NOT need imports\n// (unless you're using state)\n// all you're doing is making a function\nexport default function View(props) {\n  //use functional if there is no need to handle state\n  if (props.difficulty) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"numer\",\n        placeholder: \"?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: props.guess,\n        children: \"Guess\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: props.help,\n        children: \"Help\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Guess The Number\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Try to guess a number between 1 and 100 in less than 10 tries\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"easy\",\n          children: \"Go easy on me\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"medium\",\n          children: \"This ain't my first rodeo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"hard\",\n          children: \"I like Pain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n}\n_c = View;\n\nvar _c;\n\n$RefreshReg$(_c, \"View\");","map":{"version":3,"sources":["/Users/vincent/Desktop/Coding/The_Jump/guessthenumber_ReactVersion/src/View.js"],"names":["View","props","difficulty","guess","help"],"mappings":";;;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA,eAAe,SAASA,IAAT,CAAcC,KAAd,EAAqB;AACpC;AACI,MAAIA,KAAK,CAACC,UAAV,EAAsB;AAClB,wBACI;AAAA,8BACA;AAAQ,QAAA,IAAI,EAAC,OAAb;AACQ,QAAA,WAAW,EAAC;AADpB;AAAA;AAAA;AAAA;AAAA,cADA,eAGA;AAAQ,QAAA,OAAO,EAAED,KAAK,CAACE,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHA,eAIA;AAAQ,QAAA,OAAO,EAAEF,KAAK,CAACG,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJA;AAAA,oBADJ;AASH,GAVD,MAUO;AACH,wBAER;AAAA,8BACgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADhB,eAEgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFhB,eAIY;AAAA,gCACA;AAAQ,UAAA,KAAK,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,eAEA;AAAQ,UAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFA,eAGA;AAAQ,UAAA,KAAK,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJZ;AAAA,oBAFQ;AAaH;AACA;KA3BmBJ,I","sourcesContent":["// the body\n// here is the app interface, the presentation layer, the HTML\n// store functional components\n\n// dont use too much logic - pass down functionality from the App\n// App component imports in from here to render the UI\n\n// functional components DO NOT need imports\n// (unless you're using state)\n// all you're doing is making a function\n\nexport default function View(props) {\n//use functional if there is no need to handle state\n    if (props.difficulty) {\n        return (\n            <>\n            <input  type=\"numer\"\n                    placeholder=\"?\" />\n            <button onClick={props.guess}>Guess</button>\n            <button onClick={props.help}>Help</button>\n    </>\n\n        );\n    } else {\n        return (\n\n<>\n                <h1>Guess The Number</h1>\n                <h2>Try to guess a number between 1 and 100 in less than 10 tries</h2>\n        \n            <select>\n            <option value=\"easy\">Go easy on me</option>\n            <option value=\"medium\">This ain't my first rodeo</option>\n            <option value=\"hard\">I like Pain</option>\n        </select>\n        </>\n        )\n    }\n    }"]},"metadata":{},"sourceType":"module"}